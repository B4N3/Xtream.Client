name: $(Date:yyyyMMdd)$(Rev:.r)

variables:
  buildConfiguration: Release

trigger:
  branches:
    include:
    - master
    - refs/tags/*
  paths:
    exclude:
    - readme.md

strategy:
  matrix:
    linux:
      imageName: 'ubuntu-16.04'
    #windows:
    #  imageName: 'vs2017-win2016'

pool:
  vmImage: $(imageName)

steps:
- script: dotnet restore
  displayName: 'dotnet restore'

- task: DotNetCoreCLI@2
  displayName: 'dotnet build $(buildConfiguration)'
  inputs:
    command: build
    projects: '**/*.csproj'
    arguments: '--no-restore -c $(buildConfiguration)'

- task: DotNetCoreCLI@2
  displayName: 'dotnet test $(buildConfiguration)'
  inputs:
    command: test
    projects: '**/*Tests/*.csproj'
    arguments: '-p:Exclude=[xunit.*]* -c $(buildConfiguration) -p:CollectCoverage=true "-p:CoverletOutputFormat=\"cobertura,opencover\""'
    nobuild: true

- task: DotNetCoreCLI@2
  displayName: Install ReportGenerator Global Tool
  inputs:
    command: custom
    custom: tool
    arguments: install dotnet-reportgenerator-globaltool --tool-path .

# Generate the report using ReportGenerator (https://github.com/danielpalme/ReportGenerator)
# First install the tool on the machine, then run it
- script: |
    ./reportgenerator -reports:$(Build.SourcesDirectory)/**/coverage.cobertura.xml -targetdir:$(Build.SourcesDirectory)/CodeCoverage "-reporttypes:\"HtmlInline_AzurePipelines;Cobertura\""
  displayName: Create Code Coverage report

  # Publish the code coverage result (summary and web site)
# The summary allows to view the coverage percentage in the summary tab
# The web site allows to view which lines are covered directly in Azure Pipeline
- task: PublishCodeCoverageResults@1
  displayName: 'Publish Code Coverage report'
  inputs:
    codeCoverageTool: Cobertura
    summaryFileLocation: '$(Build.SourcesDirectory)/CodeCoverage/Cobertura.xml'
    reportDirectory: '$(Build.SourcesDirectory)/CodeCoverage'

- task: PublishTestResults@2
  displayName: 'Publishing Unit Test Results'
  inputs:
    testRunner: VSTest
    testResultsFiles: '/home/vsts/work/**/*.trx'

- bash: |
   dotnet pack Xtream.Library/Xtream.Client.csproj -o ./out -c $(buildConfiguration) /p:PackageVersion="$(Build.SourceBranchName)"
   dotnet nuget push Xtream.Library/out/ -k "$(NUGET_API_KEY)" -s https://api.nuget.org/v3/index.json
  displayName: 'Bash Script'
  condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags'))

